#классы с большой буквы

#список полей (признаков юзера), которые будут в классе User

class User:
    #описали как должен выглядить пользователь (в данном примере имеет 4 поля)
    #каждый тип полей имеет свой тип данных
    #описали шаблон нашего пользователя
    name: str # имя это строка
    age: int # возраст это число
    status: str # статус это число
    items: list[str] # items это список

    #чтобы воспользоваться этим шаблоном, нужно описать конструктор класса, т.е. как мы можем использовать наш класс в коде
    #для этого используется __init__ - инициализация нашего класса, в который мы описываем те данные, которые нам нужны

    def __init__(self, name, age, status, items):
        self.name = name
        self.age = age
        self.status = status
        self.items = items

#пример работы
if __name__ == '__main__':
    #"Oleg;16;student;book,pen,paper"
    d = {"name":"Oleg",
         "age":16,
         "status":"student",
         "items": ["book","pen", "paper"]}

    #берем нашего юзера как класс и инициализируем
    #в момент вызова скобок () в классе User и перечисляем все аргументы, которые должны быть переданы, они будут переданы в __init__
    #дальше произойдет инициализация нашего пользователя, все атрибуты положаться в атрибуты соответствующего класса
    # и после этого Олег будет представлять собой экземпляр данного класса
    #КЛАСС - это абстракция над какими-то данными, например над пользователями и мы можем описать конкретные экземпляры данного класса, прописав в него конкретные атрибуиты (поля), которые будут отличать экземпляры между собой
    oleg = User(name="Olef", age=16, status="student", items=["book","pen", "paper"])
    ogla = User(name="Olga", age=18, status="worker", items=["book", "paper"])
    print() #как заглушка, не обращать внимания
    #получается, что у нас есть 2 экземпляра одно класса и эти экземпляры никак не связаны, т.е. относятся к одному классу, имеет набор одинаковых полей, но с разнывми значениями

    #КАК их использовать в коде
    #в отличие от словарей, обращение удобное, т.к. после точки появляется всё, что нам нужно (например все поля, которые у этого класса есть)
    #вместо описания как в словаре user["age"], пишем oleg.age
    assert oleg.age == 18
    assert ogla.age == 16

    #00:47:59 продолжение по классам (еще и изменять можно, кроме чтения)